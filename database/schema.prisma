datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

//

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String? @unique
  username String? @unique
  token    String  @unique

  ouathProviders         OauthProvider[]
  donations              Donation[]
  donationAlerts         DonationAlert[]
  alertWidgets           AlertWidget[]
  images                 Image[]
  donationGoalWidgets    DonationGoalWidget[]
  donationAlertTemplates DonationAlertTemplate[]
}

//

enum OauthProviderType {
  twitch
  youtube
}

model OauthProvider {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accessToken  String
  refreshToken String
  profileId    String
  type         OauthProviderType

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// 

enum PaymentSystem {
  fondy
  test
}

enum PaymentStatus {
  notPaid
  success
  fail
}

model Donation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currency              String
  amount                Int
  senderName            String
  message               String
  paymentSystem         PaymentSystem
  paymentStatus         PaymentStatus @default(notPaid)
  paymentData           String?       @db.Text
  notificationWasPlayed Boolean       @default(false)

  recipient            User                @relation(fields: [recipientId], references: [id])
  recipientId          String
  donationGoalWidget   DonationGoalWidget? @relation(fields: [donationGoalWidgetId], references: [id])
  donationGoalWidgetId String?
}

//

model DonationAlert {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  minAmount      Int?
  maxAmount      Int?
  specificAmount Int?
  isEnabled      Boolean
  duration       Int

  user          User                   @relation(fields: [userId], references: [id])
  userId        String
  alertWidget   AlertWidget            @relation(fields: [alertWidgetId], references: [id])
  alertWidgetId String
  template      DonationAlertTemplate?
}

//

model DonationAlertTemplate {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String?
  elements String  @db.Text

  user            User          @relation(fields: [userId], references: [id])
  userId          String
  donationAlert   DonationAlert @relation(fields: [donationAlertId], references: [id])
  donationAlertId String        @unique

  // uiTextElements UiTextElement[]
}

//

model UiTextElement {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  text            String
  styleConfig     String @db.Text
  animationConfig String @db.Text
  positionConfig  String @db.Text

  // donationAlertTemplate   DonationAlertTemplate? @relation(fields: [donationAlertTemplateId], references: [id])
  // donationAlertTemplateId String?
}

//

model DonationGoalWidget {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  textWhenRaisingIsInProgress String
  textWhenRaisingIsFinished   String
  endDate                     DateTime
  isWidgetEnabled             Boolean

  user   User   @relation(fields: [userId], references: [id])
  userId String

  donations Donation[]
}

//  

model AlertWidget {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  isEnabled Boolean

  user           User            @relation(fields: [userId], references: [id])
  userId         String
  donationAlerts DonationAlert[]
}

//

model Image {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  originalFilename  String
  generatedFilename String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}
