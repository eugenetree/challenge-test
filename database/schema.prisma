datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

//

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String? @unique
  username String? @unique
  token    String  @unique

  ouathProviders               OauthProvider[]
  donations                    Donation[]
  donationAlertsWidgets        DonationAlertWidget[]
  alertWidgetsGroups           AlertWidgetsGroup[]
  images                       Image[]
  donationGoalWidgets          DonationGoalWidget[]
  donationAlertWidgetTemplates DonationAlertWidgetTemplate[]
}

//

enum OauthProviderType {
  twitch
  youtube
}

model OauthProvider {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accessToken  String
  refreshToken String
  profileId    String
  type         OauthProviderType

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// 

enum PaymentSystem {
  fondy
  test
}

enum PaymentStatus {
  notPaid
  success
  fail
}

model Donation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currency              String
  amount                Int
  senderName            String
  message               String
  paymentSystem         PaymentSystem
  paymentStatus         PaymentStatus @default(notPaid)
  paymentData           String?       @db.Text
  notificationWasPlayed Boolean       @default(false)

  recipient            User                @relation(fields: [recipientId], references: [id])
  recipientId          String
  donationGoalWidget   DonationGoalWidget? @relation(fields: [donationGoalWidgetId], references: [id])
  donationGoalWidgetId String?
}

//

model DonationAlertWidget {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  minAmount      Int?
  maxAmount      Int?
  specificAmount Int?

  user                          User                         @relation(fields: [userId], references: [id])
  userId                        String
  alertWidgetsGroup             AlertWidgetsGroup            @relation(fields: [alertWidgetsGroupId], references: [id])
  alertWidgetsGroupId           String
  donationAlertWidgetTemplate   DonationAlertWidgetTemplate?
  donationAlertWidgetTemplateId String?
}

//

model DonationAlertWidgetTemplate {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String?

  user                  User                @relation(fields: [userId], references: [id])
  userId                String
  donationAlertWidget   DonationAlertWidget @relation(fields: [donationAlertWidgetId], references: [id])
  donationAlertWidgetId String              @unique

  widgetTemplateTexts WidgetTemplateText[]
}

//

model WidgetTemplateText {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  text            String
  styleConfig     String @db.Text
  animationConfig String @db.Text
  positionConfig  String @db.Text

  donationAlertWidgetTemplate   DonationAlertWidgetTemplate @relation(fields: [donationAlertWidgetTemplateId], references: [id])
  donationAlertWidgetTemplateId String
}

//

model DonationGoalWidget {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  textWhenRaisingIsInProgress String
  textWhenRaisingIsFinished   String
  endDate                     DateTime
  isWidgetEnabled             Boolean

  user   User   @relation(fields: [userId], references: [id])
  userId String

  donations Donation[]
}

//  

model AlertWidgetsGroup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  user                 User                  @relation(fields: [userId], references: [id])
  userId               String
  donationAlertWidgets DonationAlertWidget[]
}

//

model Image {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  originalFilename  String
  generatedFilename String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}
